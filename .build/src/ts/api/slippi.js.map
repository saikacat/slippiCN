{
  "version": 3,
  "sources": ["../../../../src/ts/api/slippi.ts"],
  "sourcesContent": ["import { slippiLimiter } from \"$ts/state/limiter\";\n\nimport type { Character } from \"$ts/types/character\";\nimport type { DatabasePlayerData } from \"$ts/database/schemas\";\n\nimport fragment_player from \"$gql/FragmentPlayer.gql?raw\";\nimport get_id_by_code from \"$gql/GetIdByCode.gql?raw\";\n\nexport async function getIdByCode(code: string): Promise<string | null> {\n    await slippiLimiter.removeTokens(1);\n\n    const response = await fetch(\"https://gql-gateway-dot-slippi.uc.r.appspot.com/graphql\", {\n        \"headers\": {\n            \"Cache-Control\": \"no-cache\",\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify({\n            operationName: \"GetIdByCode\",\n            query: get_id_by_code,\n            variables: {\n                code\n            }\n        }),\n        \"method\": \"POST\"\n    });\n\n    const data = (await response.json()).data;\n\n    if (!data.getConnectCode) {\n        return null;\n    }\n\n    return data.getConnectCode.user.fbUid;\n}\n\n// horrible batching mechanism\nexport async function getPlayersById(ids: string[]): Promise<DatabasePlayerData[]> {\n    await slippiLimiter.removeTokens(1);\n\n    const queryParams = ids.map((_, i) => `$i${i}: String!`).join(\", \");\n    const aliases = ids.map((_, i) => `u${i}: getUser(fbUid: $i${i}) { ...Player }`).join(\"\\n\");\n\n    const query = fragment_player + `query GetPlayersById(${queryParams}) { ${aliases} }`;\n\n    const variables: any = {};\n\n    for (let i = 0; i < ids.length; i++) {\n        variables[\"i\" + i] = ids[i];\n    }\n\n    const response = await fetch(\"https://gql-gateway-dot-slippi.uc.r.appspot.com/graphql\", {\n        \"headers\": {\n            \"Cache-Control\": \"no-cache\",\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify({\n            operationName: \"GetPlayersById\",\n            query,\n            variables\n        }),\n        \"method\": \"POST\"\n    });\n\n    const data = (await response.json()).data;\n\n    const players: DatabasePlayerData[] = [];\n\n    for (let i = 0; i < ids.length; i++) {\n        players.push(slippiUserToDatabasePlayerData(data[\"u\" + i]));\n    }\n\n    return players;\n}\n\nconst slippiSlugMap: Record<string, Character> = {\n    \"BOWSER\": \"Bowser\",\n    \"CAPTAIN_FALCON\": \"Captain Falcon\",\n    \"DONKEY_KONG\": \"Donkey Kong\",\n    \"DR_MARIO\": \"Dr. Mario\",\n    \"FALCO\": \"Falco\",\n    \"FOX\": \"Fox\",\n    \"GAME_AND_WATCH\": \"Mr. Game & Watch\",\n    \"GANONDORF\": \"Ganondorf\",\n    \"ICE_CLIMBERS\": \"Ice Climbers\",\n    \"KIRBY\": \"Kirby\",\n    \"LINK\": \"Link\",\n    \"LUIGI\": \"Luigi\",\n    \"MARIO\": \"Mario\",\n    \"MARTH\": \"Marth\",\n    \"MEWTWO\": \"Mewtwo\",\n    \"NESS\": \"Ness\",\n    \"PEACH\": \"Peach\",\n    \"PICHU\": \"Pichu\",\n    \"PIKACHU\": \"Pikachu\",\n    \"JIGGLYPUFF\": \"Jigglypuff\",\n    \"ROY\": \"Roy\",\n    \"SAMUS\": \"Samus\",\n    \"SHEIK\": \"Sheik\",\n    \"YOSHI\": \"Yoshi\",\n    \"YOUNG_LINK\": \"Young Link\",\n    \"ZELDA\": \"Zelda\",\n};\n\nfunction slippiCharacterToCharacter(slippi: string): Character {\n    return slippiSlugMap[slippi];\n}\n\nfunction slippiUserToDatabasePlayerData(slippiUser: any): DatabasePlayerData {\n    const totalGameCount = slippiUser.rankedNetplayProfile.characters\n        ?.map((x: any) => x.gameCount)\n        .reduce((a: number, b: number) => a + b, 0);\n\n    let wins = slippiUser.rankedNetplayProfile.wins;\n    let losses = slippiUser.rankedNetplayProfile.losses;\n\n    // in case a player has won but not lost/lost but not won yet\n    if (wins || losses) {\n        wins = wins ?? 0;\n        losses = losses ?? 0;\n    }\n\n    return {\n        slippi_code: slippiUser.connectCode.code,\n        slippi_name: slippiUser.displayName,\n\n        characters: slippiUser.rankedNetplayProfile.characters?.map((x: any) => ({\n            character: slippiCharacterToCharacter(x.character),\n            proportion: x.gameCount / totalGameCount\n        })),\n\n        rating: slippiUser.rankedNetplayProfile.ratingOrdinal,\n\n        sets: slippiUser.rankedNetplayProfile.ratingUpdateCount,\n\n        wins,\n        losses\n    };\n}"],
  "mappings": "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",
  "names": ["get_id_by_code", "fragment_player"]
}
