{
  "version": 3,
  "sources": ["../../../src/routes/+page.server.ts"],
  "sourcesContent": ["import type { PageServerLoad } from \"./$types\";\n\nimport type { DatabasePlayer, DatabaseStats } from \"$ts/database/schemas\";\nimport type { Player } from \"$ts/types/player\";\nimport type { Tier } from \"$ts/types/tier\";\n\nimport dbPromise from \"$ts/database/database\";\nimport { getTierFromRating } from \"$ts/types/tier\";\n\nexport const load: PageServerLoad = async () => {\n    const db = await dbPromise;\n\n    const playersCollection = db.collection<DatabasePlayer>(\"players\");\n    const dbPlayers = await playersCollection.find().toArray();\n\n    const players: Player[] = dbPlayers.map(x => {\n        const split = x.data.slippi_code.split(\"#\");\n\n        const characters = x.data.characters || [];\n        characters.sort((a, b) => b.proportion - a.proportion);\n\n        let tier: Tier = \"Unranked\";\n\n        if (x.data.wins !== null) {\n            if (x.data.sets < 5) {\n                tier = \"Pending\";\n            } else {\n                tier = getTierFromRating(x.data.rating);\n            }\n        }\n\n        const rating = x.data.sets >= 5 ? x.data.rating : null;\n\n        return {\n            name: x.name,\n\n            slippiName: x.data.slippi_name,\n            slippiTag: split[0],\n            slippiDiscriminator: split[1],\n\n            characters,\n\n            rating,\n            tier,\n\n            sets: x.data.sets,\n\n            wins: x.data.wins,\n            losses: x.data.losses\n        }\n    });\n\n    players.sort((a, b) => {\n        const compareRating = (b.rating ?? 0) - (a.rating ?? 0);\n\n        if (compareRating !== 0) {\n            return compareRating;\n        }\n\n        // rating must be unranked or pending\n        if (a.tier !== b.tier) {\n            if (a.tier === \"Pending\") {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // wow...\n        const bw: number = b.wins ?? 0;\n        const bl: number = b.losses ?? 0;\n        const aw: number = a.wins ?? 0;\n        const al: number = a.losses ?? 0;\n\n        return ((bw / (bw + bl)) || 0) - ((aw / (aw + al)) || 0);\n    });\n\n    const statsCollection = db.collection<DatabaseStats>(\"stats\");\n\n    if (!await statsCollection.countDocuments()) {\n        await statsCollection.insertOne({ lastUpdate: new Date(0) });\n    }\n\n    const lastUpdate = (await statsCollection.findOne({}))!.lastUpdate;\n\n    return {\n        players,\n        lastUpdate\n    };\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAAsB;AACtB,kBAAkC;AAE3B,MAAM,OAAuB,YAAY;AAC5C,QAAM,KAAK,MAAM,gBAAAA;AAEjB,QAAM,oBAAoB,GAAG,WAA2B,SAAS;AACjE,QAAM,YAAY,MAAM,kBAAkB,KAAK,EAAE,QAAQ;AAEzD,QAAM,UAAoB,UAAU,IAAI,OAAK;AACzC,UAAM,QAAQ,EAAE,KAAK,YAAY,MAAM,GAAG;AAE1C,UAAM,aAAa,EAAE,KAAK,cAAc,CAAC;AACzC,eAAW,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,EAAE,UAAU;AAErD,QAAI,OAAa;AAEjB,QAAI,EAAE,KAAK,SAAS,MAAM;AACtB,UAAI,EAAE,KAAK,OAAO,GAAG;AACjB,eAAO;AAAA,MACX,OAAO;AACH,mBAAO,+BAAkB,EAAE,KAAK,MAAM;AAAA,MAC1C;AAAA,IACJ;AAEA,UAAM,SAAS,EAAE,KAAK,QAAQ,IAAI,EAAE,KAAK,SAAS;AAElD,WAAO;AAAA,MACH,MAAM,EAAE;AAAA,MAER,YAAY,EAAE,KAAK;AAAA,MACnB,WAAW,MAAM;AAAA,MACjB,qBAAqB,MAAM;AAAA,MAE3B;AAAA,MAEA;AAAA,MACA;AAAA,MAEA,MAAM,EAAE,KAAK;AAAA,MAEb,MAAM,EAAE,KAAK;AAAA,MACb,QAAQ,EAAE,KAAK;AAAA,IACnB;AAAA,EACJ,CAAC;AAED,UAAQ,KAAK,CAAC,GAAG,MAAM;AACnB,UAAM,iBAAiB,EAAE,UAAU,MAAM,EAAE,UAAU;AAErD,QAAI,kBAAkB,GAAG;AACrB,aAAO;AAAA,IACX;AAGA,QAAI,EAAE,SAAS,EAAE,MAAM;AACnB,UAAI,EAAE,SAAS,WAAW;AACtB,eAAO;AAAA,MACX,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAGA,UAAM,KAAa,EAAE,QAAQ;AAC7B,UAAM,KAAa,EAAE,UAAU;AAC/B,UAAM,KAAa,EAAE,QAAQ;AAC7B,UAAM,KAAa,EAAE,UAAU;AAE/B,YAAS,MAAM,KAAK,OAAQ,MAAO,MAAM,KAAK,OAAQ;AAAA,EAC1D,CAAC;AAED,QAAM,kBAAkB,GAAG,WAA0B,OAAO;AAE5D,MAAI,CAAC,MAAM,gBAAgB,eAAe,GAAG;AACzC,UAAM,gBAAgB,UAAU,EAAE,YAAY,IAAI,KAAK,CAAC,EAAE,CAAC;AAAA,EAC/D;AAEA,QAAM,cAAc,MAAM,gBAAgB,QAAQ,CAAC,CAAC,GAAI;AAExD,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;",
  "names": ["dbPromise"]
}
