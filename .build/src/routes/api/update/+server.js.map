{
  "version": 3,
  "sources": ["../../../../../src/routes/api/update/+server.ts"],
  "sourcesContent": ["import type { RequestEvent, RequestHandler } from \"./$types\";\n\nimport type { DatabasePlayer, DatabaseStats } from \"$ts/database/schemas\";\n\nimport { Receiver } from \"@upstash/qstash\";\nimport { getPlayersById } from \"$ts/api/slippi\";\nimport { respond } from \"$ts/api/respond\";\n\nimport { API_SECRET, QSTASH_CURRENT_SIGNING_KEY, QSTASH_NEXT_SIGNING_KEY } from \"$env/static/private\";\n\nimport dbPromise from \"$ts/database/database\";\n\nconst batch_size = 25;\n\nconst qstash = new Receiver({\n    currentSigningKey: QSTASH_CURRENT_SIGNING_KEY,\n    nextSigningKey: QSTASH_NEXT_SIGNING_KEY,\n});\n\nexport const POST: RequestHandler = async (event: RequestEvent) => {\n    let ok = event.request.headers.get(\"authorization\") === `Bearer ${API_SECRET}`;\n    \n    ok = ok || await qstash.verify({\n        signature: event.request.headers.get(\"upstash-signature\") ?? \"\",\n        body: await event.request.text()\n    });\n\n    if (!ok) {\n        return respond(401, {\n            \"status\": \"error\",\n            \"message\": \"nice try\"\n        });\n    }\n\n    const db = await dbPromise;\n\n    const playersCollection = db.collection<DatabasePlayer>(\"players\");\n\n    const players = await playersCollection.find().toArray();\n    const ids = players.map(x => x.id);\n\n    console.log(`Updating ${ids.length} players...`);\n\n    while (ids.length) {\n        const currentIds = [];\n        \n        for (let i = 0; i < batch_size && ids.length; i++) {\n            currentIds.push(ids.shift()!);\n        }\n\n        const players = await getPlayersById(currentIds);\n\n        for (let i = 0; i < currentIds.length; i++) {\n            playersCollection.findOneAndUpdate({ id: currentIds[i] }, { $set: { data: players[i] } });\n        }\n    }\n\n    const statsCollection = db.collection<DatabaseStats>(\"stats\");\n\n    if (!(await statsCollection.countDocuments())) {\n        statsCollection.insertOne({ lastUpdate: new Date(0) });\n    }\n\n    await statsCollection.findOneAndUpdate({}, { $set: { lastUpdate: new Date() } });\n\n    console.log(`Done updating.`);\n\n    return respond(200, {\n        \"status\": \"success\"\n    });\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,oBAAyB;AACzB,oBAA+B;AAC/B,qBAAwB;AAExB,qBAAgF;AAEhF,sBAAsB;AAEtB,MAAM,aAAa;AAEnB,MAAM,SAAS,IAAI,uBAAS;AAAA,EACxB,mBAAmB;AAAA,EACnB,gBAAgB;AACpB,CAAC;AAEM,MAAM,OAAuB,OAAO,UAAwB;AAC/D,MAAI,KAAK,MAAM,QAAQ,QAAQ,IAAI,eAAe,MAAM,UAAU;AAElE,OAAK,MAAM,MAAM,OAAO,OAAO;AAAA,IAC3B,WAAW,MAAM,QAAQ,QAAQ,IAAI,mBAAmB,KAAK;AAAA,IAC7D,MAAM,MAAM,MAAM,QAAQ,KAAK;AAAA,EACnC,CAAC;AAED,MAAI,CAAC,IAAI;AACL,eAAO,wBAAQ,KAAK;AAAA,MAChB,UAAU;AAAA,MACV,WAAW;AAAA,IACf,CAAC;AAAA,EACL;AAEA,QAAM,KAAK,MAAM,gBAAAA;AAEjB,QAAM,oBAAoB,GAAG,WAA2B,SAAS;AAEjE,QAAM,UAAU,MAAM,kBAAkB,KAAK,EAAE,QAAQ;AACvD,QAAM,MAAM,QAAQ,IAAI,OAAK,EAAE,EAAE;AAEjC,UAAQ,IAAI,YAAY,IAAI,mBAAmB;AAE/C,SAAO,IAAI,QAAQ;AACf,UAAM,aAAa,CAAC;AAEpB,aAAS,IAAI,GAAG,IAAI,cAAc,IAAI,QAAQ,KAAK;AAC/C,iBAAW,KAAK,IAAI,MAAM,CAAE;AAAA,IAChC;AAEA,UAAMC,WAAU,UAAM,8BAAe,UAAU;AAE/C,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,wBAAkB,iBAAiB,EAAE,IAAI,WAAW,GAAG,GAAG,EAAE,MAAM,EAAE,MAAMA,SAAQ,GAAG,EAAE,CAAC;AAAA,IAC5F;AAAA,EACJ;AAEA,QAAM,kBAAkB,GAAG,WAA0B,OAAO;AAE5D,MAAI,CAAE,MAAM,gBAAgB,eAAe,GAAI;AAC3C,oBAAgB,UAAU,EAAE,YAAY,IAAI,KAAK,CAAC,EAAE,CAAC;AAAA,EACzD;AAEA,QAAM,gBAAgB,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,IAAI,KAAK,EAAE,EAAE,CAAC;AAE/E,UAAQ,IAAI,gBAAgB;AAE5B,aAAO,wBAAQ,KAAK;AAAA,IAChB,UAAU;AAAA,EACd,CAAC;AACL;",
  "names": ["dbPromise", "players"]
}
