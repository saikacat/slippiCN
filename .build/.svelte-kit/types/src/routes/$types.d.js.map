{
  "version": 3,
  "sources": ["../../../../../.svelte-kit/types/src/routes/$types.d.ts"],
  "sourcesContent": ["import type * as Kit from '@sveltejs/kit';\n\ntype Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;\ntype RouteParams = {  }\ntype RouteId = '/';\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\ntype PageServerParentData = EnsureDefined<LayoutServerData>;\ntype PageParentData = EnsureDefined<LayoutData>;\ntype LayoutRouteId = RouteId | \"/\" | \"/register\" | null\ntype LayoutParams = RouteParams & {  }\ntype LayoutParentData = EnsureDefined<{}>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = unknown;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type LayoutServerData = null;\nexport type LayoutData = Expand<LayoutParentData>;\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;"],
  "mappings": ";;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
